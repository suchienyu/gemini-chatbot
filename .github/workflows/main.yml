name: Multi-Platform Docker Build

on:
  push:
    branches: [main]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: NEXT_PUBLIC_API_DOMAIN
        run: |
          echo "Checking environment variables presence:"
          echo "NEXT_PUBLIC_API_DOMAIN is set: ${{ secrets.NEXT_PUBLIC_API_DOMAIN != '' }}"

      - name: Build and push
        uses: docker/build-push-action@v5
        env:
          NEXTAUTH_URL: "http://localhost:3000"
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            BLOB_READ_WRITE_TOKEN=${{ secrets.BLOB_READ_WRITE_TOKEN }}
            VERCEL_URL=localhost:3000
            PORT=3000
            DB_USER=${{ secrets.DB_USER }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            POSTGRES_URL=${{ secrets.POSTGRES_URL }}
            NEXTAUTH_URL_INTERNAL=${{ secrets.NEXTAUTH_URL_INTERNAL }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            NEXT_PUBLIC_API_DOMAIN=${{secrets.NEXT_PUBLIC_API_DOMAIN}}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/chatbotapi-chatbotfront:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 進入專案目錄（確保 docker-compose.yml 在這裡）
            cd /home/ubuntu/vercel-chatbotAPI
            
            # 停止現有的api容器
            docker compose down chatbotfront
            
            docker pull chiennn/chatbotapi-chatbotfront:latest
            docker rmi $(docker images -f "dangling=true" -q)

            # 重新建構 API 容器並啟動所有服務
            docker compose up -d chatbotfront
